{"version":3,"sources":["../../../src/commands/start/TerminalUI.ts"],"names":["CTRL_C","CTRL_D","CTRL_L","BLT","bold","b","italic","i","underline","u","chalk","printHelp","log","newLine","nested","div","dim","printUsage","projectDir","options","dev","ProjectSettings","readAsync","openDevToolsAtStartup","UserSettings","getAsync","devMode","currentToggle","isMac","process","platform","ui","webOnly","filter","Boolean","map","key","message","status","view","length","join","printServerInfo","Webpack","printConnectionInstructions","url","UrlUtils","constructDeepLinkAsync","urlOpts","printQRCode","wrapLength","stdout","columns","item","text","trimStart","iosInfo","webInfo","startAsync","projectRoot","stdin","startWaitingForCommand","setRawMode","resume","setEncoding","on","handleKeypress","stopWaitingForCommand","removeListener","Prompts","addInteractionListener","pause","UserManager","setInteractiveAuthenticationCallback","clear","Android","openWebProjectAsync","shouldPrompt","nonInteractive","Simulator","red","openProjectAsync","lanAddress","hostType","defaultRecipient","rl","readline","createInterface","input","output","chr","name","cleanup","cancel","close","addListener","question","sendTo","trim","sent","Exp","sendAsync","err","setAsync","emit","openAsync","devToolsPort","readPackagerInfoAsync","enabled","projectSettings","minify","reset","Project"],"mappings":"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","sourcesContent":["import {\n  Android,\n  Exp,\n  Project,\n  ProjectSettings,\n  Prompts,\n  Simulator,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Webpack,\n} from '@expo/xdl';\nimport chalk from 'chalk';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport readline from 'readline';\nimport wrapAnsi from 'wrap-ansi';\n\nimport { loginOrRegisterIfLoggedOutAsync } from '../../accounts';\nimport log from '../../log';\nimport urlOpts from '../../urlOpts';\nimport { openInEditorAsync } from '../utils/openInEditorAsync';\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst BLT = `\\u203A`;\nconst { bold: b, italic: i, underline: u } = chalk;\n\ntype StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n};\n\nconst printHelp = (): void => {\n  log.newLine();\n  log.nested(`Press ${b('?')} to show a list of all available commands.`);\n};\n\nconst div = chalk.dim(`│`);\n\nconst printUsage = async (projectDir: string, options: Pick<StartOptions, 'webOnly'> = {}) => {\n  const { dev } = await ProjectSettings.readAsync(projectDir);\n  const openDevToolsAtStartup = await UserSettings.getAsync('openDevToolsAtStartup', true);\n  const devMode = dev ? 'development' : 'production';\n  const currentToggle = openDevToolsAtStartup ? 'enabled' : 'disabled';\n\n  const isMac = process.platform === 'darwin';\n\n  const ui = [\n    [],\n    ['a', `open Android`],\n    ['shift+a', `select a device or emulator`],\n    isMac && ['i', `open iOS simulator`],\n    isMac && ['shift+i', `select a simulator`],\n    ['w', `open web`],\n    [],\n    ['o', `open project code in your editor`],\n    ['c', `show project QR`],\n    ['p', `toggle build mode`, devMode],\n    ['r', `restart bundler`],\n    ['shift+r', `restart and clear cache`],\n    [],\n    ['d', `open Expo DevTools`],\n    ['shift+d', `toggle auto opening DevTools on startup`, currentToggle],\n    !options.webOnly && ['e', `share the app link by email`],\n  ];\n\n  log.nested(\n    ui\n      .filter(Boolean)\n      // @ts-ignore: filter doesn't work\n      .map(([key, message, status]) => {\n        if (!key) return '';\n        let view = ` ${BLT} `;\n        if (key.length === 1) view += 'Press ';\n        view += `${b(key)} ${div} `;\n        view += message;\n        // let view = ` ${BLT} Press ${b(key)} ${div} ${message}`;\n        if (status) {\n          view += ` ${chalk.dim(`(${i(status)})`)}`;\n        }\n        return view;\n      })\n      .join('\\n')\n  );\n};\n\nexport const printServerInfo = async (\n  projectDir: string,\n  options: Pick<StartOptions, 'webOnly'> = {}\n) => {\n  if (options.webOnly) {\n    Webpack.printConnectionInstructions(projectDir);\n    return;\n  }\n  const url = await UrlUtils.constructDeepLinkAsync(projectDir);\n  log.newLine();\n  log.nested(` ${u(url)}`);\n  log.newLine();\n  urlOpts.printQRCode(url);\n  const wrapLength = process.stdout.columns || 80;\n  const item = (text: string): string => ` ${BLT} ` + wrapAnsi(text, wrapLength).trimStart();\n  const iosInfo = process.platform === 'darwin' ? `, or ${b('i')} for iOS simulator` : '';\n  const webInfo = `${b`w`} to run on ${u`w`}eb`;\n  log.nested(wrapAnsi(u('To run the app, choose one of:'), wrapLength));\n\n  // TODO: if dev client, chanege this message!\n  log.nested(item(`Scan the QR code above with the Expo app (Android) or the Camera app (iOS).`));\n\n  // TODO: if no react-native-web in package.json then don't show web info\n  log.nested(item(`Press ${b`a`} for Android emulator${iosInfo}, or ${webInfo}.`));\n  log.nested(item(`Press ${b`e`} to send a link to your phone with email.`));\n\n  Webpack.printConnectionInstructions(projectDir);\n  printHelp();\n};\n\nexport const startAsync = async (projectRoot: string, options: StartOptions) => {\n  const { stdin } = process;\n  const startWaitingForCommand = () => {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n  };\n\n  const stopWaitingForCommand = () => {\n    stdin.removeListener('data', handleKeypress);\n    stdin.setRawMode(false);\n    stdin.resume();\n  };\n\n  startWaitingForCommand();\n\n  Prompts.addInteractionListener(({ pause }) => {\n    if (pause) {\n      stopWaitingForCommand();\n    } else {\n      startWaitingForCommand();\n    }\n  });\n\n  UserManager.setInteractiveAuthenticationCallback(async () => {\n    stopWaitingForCommand();\n    try {\n      return await loginOrRegisterIfLoggedOutAsync();\n    } finally {\n      startWaitingForCommand();\n    }\n  });\n\n  await printServerInfo(projectRoot, options);\n\n  async function handleKeypress(key: string) {\n    if (options.webOnly) {\n      switch (key) {\n        case 'A':\n        case 'a':\n          log.clear();\n          log('Opening the web project in Chrome on Android...');\n          await Android.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'A',\n          });\n          printHelp();\n          break;\n        case 'i':\n        case 'I':\n          log.clear();\n          log('Opening the web project in Safari on iOS...');\n          await Simulator.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'I',\n            // note(brentvatne): temporarily remove logic for picking the\n            // simulator until we have parity for Android. this also ensures that we\n            // don't interfere with the default user flow until more users have tested\n            // this out.\n            //\n            // If no simulator is booted, then prompt which simulator to use.\n            // (key === 'I' || !(await Simulator.isSimulatorBootedAsync())),\n          });\n          printHelp();\n          break;\n        case 'e':\n          log(chalk.red` ${BLT} Sending a URL is not supported in web-only mode`);\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'A':\n          log.clear();\n          await Android.openProjectAsync({ projectRoot, shouldPrompt: true });\n          printHelp();\n          break;\n        case 'a': {\n          log.clear();\n          log('Opening on Android...');\n          await Android.openProjectAsync({ projectRoot });\n          printHelp();\n          break;\n        }\n        case 'I':\n          log.clear();\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: true,\n          });\n          printHelp();\n          break;\n        case 'i': {\n          log.clear();\n\n          // note(brentvatne): temporarily remove logic for picking the\n          // simulator until we have parity for Android. this also ensures that we\n          // don't interfere with the default user flow until more users have tested\n          // this out.\n          //\n          // If no simulator is booted, then prompt for which simulator to use.\n          // const shouldPrompt =\n          //   !options.nonInteractive && (key === 'I' || !(await Simulator.isSimulatorBootedAsync()));\n\n          log('Opening on iOS...');\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: false,\n          });\n          printHelp();\n          break;\n        }\n        case 'e': {\n          stopWaitingForCommand();\n          const lanAddress = await UrlUtils.constructDeepLinkAsync(projectRoot, {\n            hostType: 'lan',\n          });\n          const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n          const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout,\n          });\n          const handleKeypress = (chr: string, key: { name: string }) => {\n            if (key && key.name === 'escape') {\n              cleanup();\n              cancel();\n            }\n          };\n          const cleanup = () => {\n            rl.close();\n            process.stdin.removeListener('keypress', handleKeypress);\n            startWaitingForCommand();\n          };\n          const cancel = async () => {\n            log.clear();\n            printHelp();\n          };\n          log.clear();\n          process.stdin.addListener('keypress', handleKeypress);\n          log('Please enter your email address (press ESC to cancel) ');\n          rl.question(\n            defaultRecipient ? `[default: ${defaultRecipient}]> ` : '> ',\n            async sendTo => {\n              cleanup();\n              if (!sendTo && defaultRecipient) {\n                sendTo = defaultRecipient;\n              }\n              sendTo = sendTo && sendTo.trim();\n              if (!sendTo) {\n                cancel();\n                return;\n              }\n              log(`Sending ${lanAddress} to ${sendTo}...`);\n\n              let sent = false;\n              try {\n                await Exp.sendAsync(sendTo, lanAddress);\n                sent = true;\n                log(`Sent link successfully.`);\n              } catch (err) {\n                log(`Could not send link. ${err}`);\n              }\n              printHelp();\n              if (sent) {\n                await UserSettings.setAsync('sendTo', sendTo);\n              }\n            }\n          );\n          break;\n        }\n      }\n    }\n\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        // @ts-ignore: Argument of type '\"SIGINT\"' is not assignable to parameter of type '\"disconnect\"'.\n        process.emit('SIGINT');\n        break;\n      }\n      case CTRL_L: {\n        log.clear();\n        break;\n      }\n      case '?': {\n        await printUsage(projectRoot, options);\n        break;\n      }\n      case 'w': {\n        log.clear();\n        log('Attempting to open the project in a web browser...');\n        await Webpack.openAsync(projectRoot);\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'c': {\n        log.clear();\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'd': {\n        const { devToolsPort } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n        log('Opening DevTools in the browser...');\n        openBrowser(`http://localhost:${devToolsPort}`);\n        printHelp();\n        break;\n      }\n      case 'D': {\n        log.clear();\n        const enabled = !(await UserSettings.getAsync('openDevToolsAtStartup', true));\n        await UserSettings.setAsync('openDevToolsAtStartup', enabled);\n        log(\n          `Automatically opening DevTools ${b(\n            enabled ? 'enabled' : 'disabled'\n          )}.\\nPress ${b`d`} to open DevTools now.`\n        );\n        printHelp();\n        break;\n      }\n      case 'p': {\n        log.clear();\n        const projectSettings = await ProjectSettings.readAsync(projectRoot);\n        const dev = !projectSettings.dev;\n        await ProjectSettings.setAsync(projectRoot, { dev, minify: !dev });\n        log(\n          `Metro bundler is now running in ${chalk.bold(\n            dev ? 'development' : 'production'\n          )}${chalk.reset(` mode.`)}\nPlease reload the project in the Expo app for the change to take effect.`\n        );\n        printHelp();\n        break;\n      }\n      case 'r':\n      case 'R': {\n        log.clear();\n        const reset = key === 'R';\n        if (reset) {\n          log('Restarting Metro bundler and clearing cache...');\n        } else {\n          log('Restarting Metro bundler...');\n        }\n        Project.startAsync(projectRoot, { ...options, reset });\n        break;\n      }\n      case 'o':\n        log('Trying to open the project in your editor...');\n        await openInEditorAsync(projectRoot);\n    }\n  }\n};\n"],"file":"TerminalUI.js"}