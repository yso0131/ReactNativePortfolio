{"version":3,"sources":["../../src/commands/publish.ts"],"names":["action","projectDir","options","assertValidReleaseChannel","releaseChannel","exp","pkg","skipSDKVersionRequirement","sdkVersion","isDetached","target","user","UserManager","ensureLoggedInAsync","owner","log","addNewLineIfNone","chalk","bold","replace","l","toUpperCase","kind","newLine","duringBuild","logSDKMismatchWarningsAsync","projectRoot","logExpoUpdatesWarnings","logOptimizeWarnings","logBareWorkflowWarnings","quiet","simpleSpinner","start","result","Project","publishAsync","resetCache","clear","url","stop","logManifestUrl","websiteUrl","logProjectPageUrl","copiedToClipboard","recipient","sendTo","getRecipient","sendUrlAsync","isInvalidReleaseChannel","channelRe","RegExp","test","CommandError","manifestUrl","getExampleManifestUrl","TerminalLink","fallbackToUrl","dim","learnMore","productionMessage","gray","includes","buildStatus","getBuildStatusAsync","platform","current","hasMismatch","userHasBuiltExperienceBefore","userHasBuiltAppBefore","nestedWarn","hasConflictingUpdatesPackages","dependencies","hasOptimized","fs","existsSync","path","join","hasExpoInstalled","program","command","alias","description","helpGroup","option","asyncActionProjectDir"],"mappings":"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","sourcesContent":["import { getConfig, getDefaultTarget, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport simpleSpinner from '@expo/simple-spinner';\nimport { Project, UserManager } from '@expo/xdl';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport fs from 'fs';\nimport path from 'path';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport { getProjectOwner } from '../projects';\nimport * as sendTo from '../sendTo';\nimport * as TerminalLink from './utils/TerminalLink';\nimport { formatNamedWarning } from './utils/logConfigWarnings';\n\ntype Options = {\n  clear?: boolean;\n  sendTo?: string | boolean;\n  quiet?: boolean;\n  target?: ProjectTarget;\n  releaseChannel?: string;\n  duringBuild?: boolean;\n  maxWorkers?: number;\n  parent?: { nonInteractive: boolean };\n};\n\nexport async function action(\n  projectDir: string,\n  options: Options = {}\n): Promise<Project.PublishedProjectResult> {\n  assertValidReleaseChannel(options.releaseChannel);\n\n  const { exp, pkg } = getConfig(projectDir, {\n    skipSDKVersionRequirement: true,\n  });\n  const { sdkVersion, isDetached } = exp;\n\n  const target = options.target ?? getDefaultTarget(projectDir);\n\n  // note: this validates the exp.owner when the user is a robot\n  const user = await UserManager.ensureLoggedInAsync();\n  const owner = getProjectOwner(user, exp);\n\n  log.addNewLineIfNone();\n\n  // Log building info before building.\n  // This gives the user sometime to bail out if the info is unexpected.\n\n  if (sdkVersion && target === 'managed') {\n    log(`- Expo SDK: ${log.chalk.bold(exp.sdkVersion)}`);\n  }\n  log(`- Release channel: ${log.chalk.bold(options.releaseChannel)}`);\n  log(`- Workflow: ${log.chalk.bold(target.replace(/\\b\\w/g, l => l.toUpperCase()))}`);\n  if (user.kind === 'robot') {\n    log(`- Owner: ${log.chalk.bold(owner)}`);\n  }\n\n  log.newLine();\n\n  // Log warnings.\n\n  if (!isDetached && !options.duringBuild) {\n    // Check for SDK version and release channel mismatches only after displaying the values.\n    await logSDKMismatchWarningsAsync({\n      projectRoot: projectDir,\n      releaseChannel: options.releaseChannel,\n      sdkVersion,\n    });\n  }\n\n  logExpoUpdatesWarnings(pkg);\n\n  logOptimizeWarnings({ projectRoot: projectDir });\n\n  if (!options.target && target === 'bare') {\n    logBareWorkflowWarnings(pkg);\n  }\n\n  log.addNewLineIfNone();\n\n  // Build and publish the project.\n\n  log(`Building optimized bundles and generating sourcemaps...`);\n\n  if (options.quiet) {\n    simpleSpinner.start();\n  }\n\n  const result = await Project.publishAsync(projectDir, {\n    releaseChannel: options.releaseChannel,\n    quiet: options.quiet,\n    target,\n    resetCache: options.clear,\n  });\n\n  const url = result.url;\n\n  if (options.quiet) {\n    simpleSpinner.stop();\n  }\n\n  log('Publish complete');\n  log.newLine();\n\n  logManifestUrl({ url, sdkVersion: exp.sdkVersion });\n\n  if (target === 'managed') {\n    // TODO: replace with websiteUrl from server when it is available, if that makes sense.\n    const websiteUrl = url.replace('exp.host', 'expo.io');\n\n    // note(brentvatne): disable copy to clipboard functionality for now, need to think more about\n    // whether this is desirable.\n    //\n    // Attempt to copy the URL to the clipboard, if it succeeds then append a notice to the log.\n    // const copiedToClipboard = copyToClipboard(websiteUrl);\n\n    logProjectPageUrl({ url: websiteUrl, copiedToClipboard: false });\n\n    // Only send the link for managed projects.\n    const recipient = await sendTo.getRecipient(options.sendTo);\n    if (recipient) {\n      await sendTo.sendUrlAsync(websiteUrl, recipient);\n    }\n  }\n\n  log.newLine();\n\n  return result;\n}\n\nexport function isInvalidReleaseChannel(releaseChannel?: string): boolean {\n  const channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  return !!releaseChannel && !channelRe.test(releaseChannel);\n}\n\n// TODO(Bacon): should we prompt with a normalized value?\nfunction assertValidReleaseChannel(releaseChannel?: string): void {\n  if (isInvalidReleaseChannel(releaseChannel)) {\n    throw new CommandError(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n  }\n}\n\n/**\n * @example 📝  Manifest: https://exp.host/@bacon/my-app/index.exp?sdkVersion=38.0.0 Learn more: https://expo.fyi/manifest-url\n * @param options\n */\nfunction logManifestUrl({ url, sdkVersion }: { url: string; sdkVersion?: string }) {\n  const manifestUrl = getExampleManifestUrl(url, sdkVersion) ?? url;\n  log(\n    `📝  Manifest: ${log.chalk.bold(TerminalLink.fallbackToUrl(url, manifestUrl))} ${log.chalk.dim(\n      TerminalLink.learnMore('https://expo.fyi/manifest-url')\n    )}`\n  );\n}\n\n/**\n *\n * @example ⚙️   Project page: https://expo.io/@bacon/my-app [copied to clipboard] Learn more: https://expo.fyi/project-page\n * @param options\n */\nfunction logProjectPageUrl({\n  url,\n  copiedToClipboard,\n}: {\n  url: string;\n  copiedToClipboard: boolean;\n}) {\n  let productionMessage = `⚙️   Project page: ${log.chalk.bold(\n    TerminalLink.fallbackToUrl(url, url)\n  )}`;\n\n  if (copiedToClipboard) {\n    productionMessage += ` ${log.chalk.gray(`[copied to clipboard]`)}`;\n  }\n  productionMessage += ` ${log.chalk.dim(TerminalLink.learnMore('https://expo.fyi/project-page'))}`;\n\n  log(productionMessage);\n}\n\nfunction getExampleManifestUrl(url: string, sdkVersion: string | undefined): string | null {\n  if (!sdkVersion) {\n    return null;\n  }\n\n  if (url.includes('release-channel') && url.includes('?release-channel')) {\n    return (\n      url.replace('?release-channel', '/index.exp?release-channel') + `&sdkVersion=${sdkVersion}`\n    );\n  } else if (url.includes('?') && !url.includes('release-channel')) {\n    // This is the only relevant url query param we are aware of at the time of\n    // writing this code, so if there is some other param included we don't know\n    // how to deal with it and log nothing.\n    return null;\n  } else {\n    return `${url}/index.exp?sdkVersion=${sdkVersion}`;\n  }\n}\n\n/**\n * A convenient warning reminding people that they're publishing with an SDK that their published app does not support.\n *\n * @param options\n */\nasync function logSDKMismatchWarningsAsync({\n  projectRoot,\n  releaseChannel,\n  sdkVersion,\n}: {\n  projectRoot: string;\n  releaseChannel?: string;\n  sdkVersion?: string;\n}) {\n  if (!sdkVersion) {\n    return;\n  }\n\n  const buildStatus = await Project.getBuildStatusAsync(projectRoot, {\n    platform: 'all',\n    current: true,\n    releaseChannel,\n    sdkVersion,\n  });\n  const hasMismatch =\n    buildStatus.userHasBuiltExperienceBefore && !buildStatus.userHasBuiltAppBefore;\n  if (!hasMismatch) {\n    return;\n  }\n\n  // A convenient warning reminding people that they're publishing with an SDK that their published app does not support.\n  log.nestedWarn(\n    formatNamedWarning(\n      'URL mismatch',\n      `No standalone app has been built with SDK ${sdkVersion} and release channel \"${releaseChannel}\" for this project before.\\n  OTA updates only work for native projects that have the same SDK version and release channel.`,\n      'https://docs.expo.io/workflow/publishing/#limitations'\n    )\n  );\n}\n\nexport function logExpoUpdatesWarnings(pkg: PackageJSONConfig): void {\n  const hasConflictingUpdatesPackages =\n    pkg.dependencies?.['expo-updates'] && pkg.dependencies?.['expokit'];\n\n  if (!hasConflictingUpdatesPackages) {\n    return;\n  }\n\n  log.nestedWarn(\n    formatNamedWarning(\n      'Conflicting Updates',\n      `You have both the ${chalk.bold('expokit')} and ${chalk.bold(\n        'expo-updates'\n      )} packages installed in package.json.\\n  These two packages are incompatible and ${chalk.bold(\n        'publishing updates with expo-updates will not work if expokit is installed'\n      )}.\\n  If you intend to use ${chalk.bold('expo-updates')}, please remove ${chalk.bold(\n        'expokit'\n      )} from your dependencies.`\n    )\n  );\n}\n\nexport function logOptimizeWarnings({ projectRoot }: { projectRoot: string }): void {\n  const hasOptimized = fs.existsSync(path.join(projectRoot, '/.expo-shared/assets.json'));\n  if (hasOptimized) {\n    return;\n  }\n  log.nestedWarn(\n    formatNamedWarning(\n      'Optimization',\n      `Project may contain uncompressed images. Optimizing image assets can improve app size and performance.\\n  To fix this, run ${chalk.bold(\n        `npx expo-optimize`\n      )}`,\n      'https://docs.expo.io/distribution/optimizing-updates/#optimize-images'\n    )\n  );\n}\n\n/**\n * Warn users if they attempt to publish in a bare project that may also be\n * using Expo client and does not If the developer does not have the Expo\n * package installed then we do not need to warn them as there is no way that\n * it will run in Expo client in development even. We should revisit this with\n * dev client, and possibly also by excluding SDK version for bare\n * expo-updates usage in the future (and then surfacing this as an error in\n * the Expo Go app instead)\n *\n * Related: https://github.com/expo/expo/issues/9517\n *\n * @param pkg package.json\n */\nexport function logBareWorkflowWarnings(pkg: PackageJSONConfig) {\n  const hasExpoInstalled = pkg.dependencies?.['expo'];\n  if (!hasExpoInstalled) {\n    return;\n  }\n\n  log.nestedWarn(\n    formatNamedWarning(\n      'Workflow target',\n      `This is a ${chalk.bold(\n        'bare workflow'\n      )} project. The resulting publish will only run properly inside of a native build of your project. If you want to publish a version of your app that will run in Expo client, please use ${chalk.bold(\n        'expo publish --target managed'\n      )}. You can skip this warning by explicitly running ${chalk.bold(\n        'expo publish --target bare'\n      )} in the future.`\n    )\n  );\n}\n\nexport default function (program: Command) {\n  program\n    .command('publish [path]')\n    .alias('p')\n    .description('Deploy a project to Expo hosting')\n    .helpGroup('core')\n    .option('-q, --quiet', 'Suppress verbose output from the Metro bundler.')\n    .option('-s, --send-to [dest]', 'A phone number or email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    .option(\n      '-t, --target [env]',\n      'Target environment for which this publish is intended. Options are `managed` or `bare`.'\n    )\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option(\n      '--release-channel <release channel>',\n      \"The release channel to publish to. Default is 'default'.\",\n      'default'\n    )\n    .asyncActionProjectDir(action);\n}\n"],"file":"publish.js"}