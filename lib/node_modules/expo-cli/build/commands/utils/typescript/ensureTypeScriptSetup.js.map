{"version":3,"sources":["../../../../src/commands/utils/typescript/ensureTypeScriptSetup.ts"],"names":["ensureTypeScriptSetupAsync","projectRoot","isTypeScriptSetupDisabled","chalk","dim","tsConfigPath","path","join","intent","shouldSetupTypeScriptAsync","ensureRequiredDependenciesAsync","program","nonInteractive","isBootstrapping","content","fs","readFile","encoding","then","txt","trim","isBlankConfig","typescriptFile","getSDKVersionsAsync","exp","skipSDKVersionRequirement","sdkVersion","sdkVersions","Versions","releasedSdkVersionsAsync","skipPrompt","resolutions","missing","length","typescript","versions","relatedPackages","pkg","version","readableMissingPackages","map","p","isYarn","PackageManager","isUsingYarn","title","message","cyan","initial","installPackagesAsync","devPackages","col","process","stdout","columns","installCommand","disableMessage","solution","bold","reset","CommandError","packageManager","createForProject","yarn","log","silent","isDebug","packagesStr","newLine","installingPackageStep","addDevAsync","e","fail","succeed"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport { Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport wrapAnsi from 'wrap-ansi';\n\nimport CommandError from '../../../CommandError';\nimport log from '../../../log';\nimport { confirmAsync } from '../../../prompts';\nimport { logNewSection } from '../CreateApp';\nimport {\n  collectMissingPackages,\n  hasTSConfig,\n  queryFirstProjectTypeScriptFileAsync,\n} from './resolveModules';\nimport { isTypeScriptSetupDisabled, updateTSConfigAsync } from './updateTSConfig';\n\nexport async function ensureTypeScriptSetupAsync(projectRoot: string): Promise<void> {\n  if (isTypeScriptSetupDisabled) {\n    log(chalk.dim('\\u203A Skipping TypeScript verification'));\n    return;\n  }\n\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n\n  // Ensure the project is TypeScript before continuing.\n  const intent = await shouldSetupTypeScriptAsync(projectRoot);\n  if (!intent) {\n    return;\n  }\n\n  // Ensure TypeScript packages are installed\n  await ensureRequiredDependenciesAsync(\n    projectRoot,\n    // Don't prompt in CI\n    program.nonInteractive\n  );\n\n  // Update the config\n  await updateTSConfigAsync({ projectRoot, tsConfigPath, isBootstrapping: intent.isBootstrapping });\n}\n\nexport async function shouldSetupTypeScriptAsync(\n  projectRoot: string\n): Promise<{ isBootstrapping: boolean } | null> {\n  const tsConfigPath = await hasTSConfig(projectRoot);\n\n  // Enable TS setup if the project has a `tsconfig.json`\n  if (tsConfigPath) {\n    const content = await fs.readFile(tsConfigPath, { encoding: 'utf8' }).then(\n      txt => txt.trim(),\n      () => null\n    );\n    const isBlankConfig = content === '' || content === '{}';\n    return { isBootstrapping: isBlankConfig };\n  }\n  // This is a somewhat heavy check in larger projects.\n  // Test that this is reasonably paced by running expo start in `expo/apps/native-component-list`\n  const typescriptFile = await queryFirstProjectTypeScriptFileAsync(projectRoot);\n  if (typescriptFile) {\n    return { isBootstrapping: true };\n  }\n\n  return null;\n}\n\nasync function getSDKVersionsAsync(projectRoot: string): Promise<Versions.SDKVersion | null> {\n  try {\n    const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n    if (exp.sdkVersion) {\n      const sdkVersions = await Versions.releasedSdkVersionsAsync();\n      return sdkVersions[exp.sdkVersion] ?? null;\n    }\n  } catch {\n    // This is a convenience method and we should avoid making this halt the process.\n  }\n  return null;\n}\n\nasync function ensureRequiredDependenciesAsync(\n  projectRoot: string,\n  skipPrompt: boolean = false\n): Promise<string> {\n  const { resolutions, missing } = collectMissingPackages(projectRoot);\n  if (!missing.length) {\n    return resolutions.typescript!;\n  }\n\n  // Ensure the versions are right for the SDK that the project is currently using.\n  const versions = await getSDKVersionsAsync(projectRoot);\n  if (versions?.relatedPackages) {\n    for (const pkg of missing) {\n      if (pkg.pkg in versions.relatedPackages) {\n        pkg.version = versions.relatedPackages[pkg.pkg];\n      }\n    }\n  }\n\n  // Prompt to install or bail out...\n  const readableMissingPackages = missing.map(p => p.pkg).join(', ');\n\n  const isYarn = PackageManager.isUsingYarn(projectRoot);\n\n  let title = `It looks like you're trying to use TypeScript but don't have the required dependencies installed.`;\n\n  if (!skipPrompt) {\n    if (\n      await confirmAsync({\n        message: title + ` Would you like to install ${chalk.cyan(readableMissingPackages)}?`,\n        initial: true,\n      })\n    ) {\n      await installPackagesAsync(projectRoot, {\n        isYarn,\n        devPackages: missing.map(({ pkg, version }) => {\n          if (version) {\n            return [pkg, version].join('@');\n          }\n          return pkg;\n        }),\n      });\n      // Try again but skip prompting twice.\n      return await ensureRequiredDependenciesAsync(projectRoot, true);\n    }\n\n    // Reset the title so it doesn't print twice in interactive mode.\n    title = '';\n  } else {\n    title += '\\n\\n';\n  }\n\n  const col = process.stdout.columns || 80;\n\n  const installCommand =\n    (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n    ' ' +\n    missing\n      .map(({ pkg, version }) => {\n        if (version) {\n          return [pkg, version].join('@');\n        }\n        return pkg;\n      })\n      .join(' ');\n\n  let disableMessage =\n    \"If you're not using TypeScript, please remove the TypeScript files from your project\";\n\n  if (await hasTSConfig(projectRoot)) {\n    disableMessage += ` and delete the tsconfig.json.`;\n  } else {\n    disableMessage += '.';\n  }\n\n  const solution = `Please install ${chalk.bold(\n    readableMissingPackages\n  )} by running:\\n\\n  ${chalk.reset.bold(installCommand)}\\n\\n`;\n\n  // This prevents users from starting a misconfigured JS or TS project by default.\n  throw new CommandError(wrapAnsi(title + solution + disableMessage + '\\n', col));\n}\n\nasync function installPackagesAsync(\n  projectRoot: string,\n  { isYarn, devPackages }: { isYarn: boolean; devPackages: string[] }\n) {\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    yarn: isYarn,\n    log,\n    silent: !log.isDebug,\n  });\n\n  const packagesStr = chalk.bold(devPackages.join(', '));\n  log.newLine();\n  const installingPackageStep = logNewSection(`Installing ${packagesStr}`);\n  try {\n    await packageManager.addDevAsync(...devPackages);\n  } catch (e) {\n    installingPackageStep.fail(`Failed to install ${packagesStr} with error: ${e.message}`);\n    throw e;\n  }\n  installingPackageStep.succeed(`Installed ${packagesStr}`);\n}\n"],"file":"ensureTypeScriptSetup.js"}