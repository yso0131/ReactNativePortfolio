{"version":3,"sources":["../../../../src/commands/utils/typescript/updateTSConfig.ts"],"names":["TS_FEATURE_FLAG","isTypeScriptSetupDisabled","updateTSConfigAsync","projectRoot","tsConfigPath","isBootstrapping","JsonFile","writeAsync","projectTSConfig","read","json5","compilerOptions","modifications","hasTemplateTsconfig","extends","baseTSConfigName","push","jsx","target","lib","allowJs","skipLibCheck","noEmit","allowSyntheticDefaultImports","resolveJsonModule","esModuleInterop","moduleResolution","length","log","addNewLineIfNone","chalk","bold","cyan","dim","logModifications","newLine","printTable","sort","a","b","items","tableFormat","name","msg","key","value"],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport { boolish } from 'getenv';\n\nimport log from '../../../log';\nimport { baseTSConfigName, resolveBaseTSConfig } from './resolveModules';\n\nconst TS_FEATURE_FLAG = 'EXPO_NO_TYPESCRIPT_SETUP';\n\nexport const isTypeScriptSetupDisabled = boolish(TS_FEATURE_FLAG, false);\n\nexport async function updateTSConfigAsync({\n  projectRoot,\n  tsConfigPath,\n  isBootstrapping,\n}: {\n  projectRoot: string;\n  tsConfigPath: string;\n  isBootstrapping: boolean;\n}): Promise<void> {\n  if (isBootstrapping) {\n    await JsonFile.writeAsync(tsConfigPath, {});\n  }\n\n  const projectTSConfig = JsonFile.read(tsConfigPath, {\n    // Some tsconfig.json files have a generated comment in the file.\n    json5: true,\n  });\n  if (projectTSConfig.compilerOptions == null) {\n    projectTSConfig.compilerOptions = {};\n    isBootstrapping = true;\n  }\n\n  const modifications: [string, string][] = [];\n\n  // If the default TSConfig template exists (SDK +41), then use it in the project\n  const hasTemplateTsconfig = resolveBaseTSConfig(projectRoot);\n  if (hasTemplateTsconfig) {\n    if (projectTSConfig.extends !== baseTSConfigName) {\n      projectTSConfig.extends = baseTSConfigName;\n      modifications.push(['extends', baseTSConfigName]);\n    }\n  } else if (isBootstrapping) {\n    // use an unversioned config when the versioned config cannot be resolved\n    projectTSConfig.compilerOptions = {\n      jsx: 'react-native',\n      target: 'esnext',\n      lib: ['esnext'],\n      allowJs: true,\n      skipLibCheck: true,\n      noEmit: true,\n      allowSyntheticDefaultImports: true,\n      resolveJsonModule: true,\n      esModuleInterop: true,\n      moduleResolution: 'node',\n    };\n    modifications.push(['compilerOptions', 'configured']);\n  }\n\n  // If no changes, then quietly bail out\n  if (!modifications.length) {\n    return;\n  }\n\n  // Write changes and log out a summary of what changed\n  await JsonFile.writeAsync(tsConfigPath, projectTSConfig);\n\n  log.addNewLineIfNone();\n\n  if (isBootstrapping) {\n    log(`${chalk.bold`TypeScript`}: A ${chalk.cyan('tsconfig.json')} has been auto-generated`);\n  } else {\n    log(\n      `${chalk.bold`TypeScript`}: The ${chalk.cyan(\n        'tsconfig.json'\n      )} has been updated ${chalk.dim`(Use ${TS_FEATURE_FLAG} to skip)`}`\n    );\n    logModifications(modifications);\n  }\n  log.newLine();\n}\n\nfunction logModifications(modifications: string[][]) {\n  log.newLine();\n\n  log(`\\u203A ${chalk.bold('Required')} modifications made to the ${chalk.cyan('tsconfig.json')}:`);\n\n  log.newLine();\n\n  // Sort the items based on key name length\n  printTable(modifications.sort((a, b) => a[0].length - b[0].length));\n\n  log.newLine();\n}\n\nfunction printTable(items: string[][]) {\n  const tableFormat = (name: string, msg: string) =>\n    `  ${chalk.bold`${name}`} is now ${chalk.cyan(msg)}`;\n  for (const [key, value] of items) {\n    log(tableFormat(key, value));\n  }\n}\n"],"file":"updateTSConfig.js"}